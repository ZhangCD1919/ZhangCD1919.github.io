(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{275:function(t,a,s){"use strict";s.r(a);var r=s(38),e=Object(r.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"xss和csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss和csrf","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS和CSRF")]),t._v(" "),s("p",[t._v("XSS（Cross-site scripting）跨站脚本攻击，为不和样式表CSS混淆，所以缩写为XSS。主要针对客户端，攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。")]),t._v(" "),s("p",[t._v("CSRF（Cross-site request forgery）跨站请求伪造，主要针对服务端，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),s("h2",{attrs:{id:"xss-跨站脚本攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss-跨站脚本攻击","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS 跨站脚本攻击")]),t._v(" "),s("h4",{attrs:{id:"攻击方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 攻击方式")]),t._v(" "),s("ol",[s("li",[t._v("反射型"),s("br"),t._v("\n反射型XSS，也叫非持久型XSS（No-persistent XSS）。反射型 XSS 只在当下进行攻击，一般出现在搜索页面、留言板块的输入框，或一个含XSS代码参数的URL。比如在浏览器地址栏输入 https://www.baidu.com/s?ie=UTF-8&wd=<script>alert(document.cookie)<\/script>，跳转百度搜索页面并会填充wd参数到搜索框。如果百度存在安全漏洞，搜索框内script代码被解析执行，则发给你该地址的黑客便完成了XSS反射型攻击。\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("攻击者构造出特殊的 URL，其中包含恶意代码。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")])])])])]),t._v(" "),s("li",[t._v("存储型"),s("br"),t._v("\n存储型XSS，也叫持久型XSS。存储型 XSS 会通过安全漏洞将XSS代码保存在服务器端，十分稳定有效，并且效果持久。最典型的是留言板XSS。用户A留言<script>alert('哈哈，你被我攻击了！')<\/script>，并提交。服务器接受并存储这一数据。当用户B加载该留言页面时，该留言被浏览器解析并执行。更恶意的操作可以利用script读取cookie、发送请求。步骤如下：\n"),s("ul",[s("li",[s("ol",[s("li",[t._v("攻击者将恶意代码提交到目标网站的数据库中。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")])])])])])]),t._v(" "),s("h4",{attrs:{id:"如何预防"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何预防","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何预防")]),t._v(" "),s("ol",[s("li",[t._v('对参数和数据的输入输出做限制和处理，使用黑名单或白名单过滤，将<>&"等字符，以及特殊的 HTML 属性、JavaScript API进行转义。代码可参考：'),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v('/[<>&"]/g')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&gt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&amp;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&quot;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("对重要的cookie值设置 HttpOnly 属性。XSS 一般利用js脚步读取用户浏览器中的Cookie，设置 HttpOnly 可以预防非法读取，只在请求时携带。")]),t._v(" "),s("li",[t._v("使用HTTP header CSP（Content-Security-Policy），设置浏览器加载和执行白名单。严格的 CSP 在 XSS 的防范中可以起到以下的作用：\n"),s("ul",[s("li",[t._v("禁止加载外域代码，防止复杂的攻击逻辑。")]),t._v(" "),s("li",[t._v("禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。")]),t._v(" "),s("li",[t._v("禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。")]),t._v(" "),s("li",[t._v("禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。\n更详细的CSP解析可参考官网"),s("a",{attrs:{href:"https://content-security-policy.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Content Security Policy Reference"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[t._v("如果对页面的安全性要求特别高，则还要注意特别的字符和标签属性，特殊的上下文调用不同转义规则，可参考更详细的解析"),s("a",{attrs:{href:"https://my.oschina.net/meituantech/blog/2218539",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（一）：如何防止XSS攻击？"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"csrf-跨站请求伪造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨站请求伪造","aria-hidden":"true"}},[t._v("#")]),t._v(" CSRF 跨站请求伪造")]),t._v(" "),s("h4",{attrs:{id:"攻击方式-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 攻击方式")]),t._v(" "),s("ol",[s("li",[t._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),t._v(" "),s("li",[t._v("攻击者引诱受害者访问了b.com。")]),t._v(" "),s("li",[t._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。")]),t._v(" "),s("li",[t._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),t._v(" "),s("li",[t._v("a.com以受害者的名义执行了act=xx。")]),t._v(" "),s("li",[t._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),t._v(" "),s("h4",{attrs:{id:"csrf的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf的特点","aria-hidden":"true"}},[t._v("#")]),t._v(" CSRF的特点")]),t._v(" "),s("ul",[s("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),s("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),s("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),s("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。\nCSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")])]),t._v(" "),s("h4",{attrs:{id:"如何防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何防御","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何防御")]),t._v(" "),s("ol",[s("li",[t._v("同源检测 Origin和Referer的header验证是否是同源网站。")]),t._v(" "),s("li",[t._v("身份验证 使用token、双重Cookie以及 Samesite Cookie 对用户身份进行加强验证。")]),t._v(" "),s("li",[t._v("不要用get接口进行数据操作。")])]),t._v(" "),s("h3",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/mao2080/p/9460397.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络攻击-XSS攻击详解"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈CSRF攻击方式"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://my.oschina.net/meituantech/blog/2218539",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（一）：如何防止XSS攻击？"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://my.oschina.net/meituantech/blog/2243958",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列之二：如何防止CSRF攻击？"),s("OutboundLink")],1)])])},[],!1,null,null,null);a.default=e.exports}}]);