(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{284:function(e,a,t){"use strict";t.r(a);var s=t(38),r=Object(s.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),t("p",[e._v("Web 应用越来越复杂与庞大，只通过编写html、css和js这些基础的语言使得业务开发越发困难。于是，各种新的框架、语言和工具诞生了。我们可以使用css预编译器stylus编写样式，使用vue编写页面和逻辑，使用es6处理模块化的导出和引入，从而大幅度提升编码效率。但是编写完成想要在浏览器和node环境中运行，仍然只能通过html、css和js来实现。所以我们需要一些工具，可以将vue、es6、模块化、css预处理器等转换为最基础的html、css和es5代码。webpack便是集成编译、压缩、合并打包于一体的构建工具。\nWebpack 启动后会从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。")]),e._v(" "),t("h2",{attrs:{id:"loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader","aria-hidden":"true"}},[e._v("#")]),e._v(" loader")]),e._v(" "),t("p",[e._v("webpack 把一切看作模块。webpack原生只支持对js文件的解析，其他文件都需要 loader 机制配置解析。如css-loader解析css文件")]),e._v(" "),t("h2",{attrs:{id:"plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin","aria-hidden":"true"}},[e._v("#")]),e._v(" Plugin")]),e._v(" "),t("p",[e._v("Plugin 是用来扩展 Webpack 功能的，plugins 属性是一个数组，里面的每一项都是插件的一个实例，例如 ExtractTextPlugin 插件的作用是提取出 JavaScript 代码里的 CSS 到一个单独的文件。")])])},[],!1,null,null,null);a.default=r.exports}}]);